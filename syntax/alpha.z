$define 'Type ($type '(#kind TYPE))
$define 'Code ($type '(#kind CODE))
$define 'Any ($type '(#kind ANY))
$define 'Noreturn ($type '(#kind NORETURN))
$define 'Void ($type '(#kind VOID))
$define 'Bool ($type '(#kind BOOL))

$define 'cast $cast
$define 'block $block
$define 'continue $continue
$define 'break $break
$define 'return $return
$define 'defer $defer
$define '`continue $continue-caller
$define '`break $break-caller
$define '`return $return-caller
$define '`defer $defer-caller
$define 'assert $assert

$define ':
  $macro (($declare 'name Code) ($declare 'type Type)) Void
    $declare-caller ($insert "'%" name) type

$define ':=
  $macro (($declare 'name Code) ($declare 'value Any)) Void
    $define-caller ($insert "'%" name) value

$define '=
  $macro (($declare 'lhs Code) ($define 'rhs Any)) Void
    $assign-caller ($insert "'%" lhs) rhs

$define '!
  $proc (($declare 'value Any)) ($type-of value)
    $return ($operator '! value)

:= true (cast Bool 1)
:= false (cast Bool 0)
