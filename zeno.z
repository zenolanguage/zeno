; TODO(dfra): turn enum, union, struct into macros which wrap $type.

$define 'u8 ($type 'INTEGER '(#bits 8 #signedness UNSIGNED))
$define 'u32 ($type 'INTEGER '(#bits 32 #signedness UNSIGNED))
$define 'string ($type 'POINTER '(#pointer_kind SLICE #child ,u8))

$proc '^ '((child ,($type 'TYPE))) ($type 'TYPE)
  $return ($type 'POINTER '(#pointer_kind ONE #child ,child))

$proc '[dynamic] '((child ,($type 'TYPE))) ($type 'TYPE)
  $return ($type 'ARRAY '(#array_kind DYNAMIC #child ,child))

enum Code_Kind
  IDENTIFIER
  KEYWORD
  INTEGER
  FLOAT
  STRING
  TUPLE

union Code_Data
  as_atom string
  as_tuple ([dynamic] (^ Code))

struct Code
  location u32
  kind Code_Kind
  #using data Code_Data

enum Type_Kind
  TYPE
  CODE
  NULL
  NORETURN
  VOID
  BOOL
  ANYTYPE
  ANYOPAQUE
  ANYERROR
  COMPTIME_INTEGER
  COMPTIME_FLOAT
  ERROR_SET
  ERROR_UNION
  OPTIONAL
  POINTER
  ARRAY
  MATRIX
  MAP
  STRUCT
  UNION
  ENUM
  PROCEDURE

struct Type
  kind Type_Kind
